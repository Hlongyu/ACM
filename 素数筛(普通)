int prime[MAX_N];
bool is_prime[MAX_N+1];

// 返回n以内的素数的个数
int sieve(int n)
{
    int p = 0;
    // 初始化
    for(int i = 0; i <= n; i++)
    {
        is_prime[i] = true;
    }
    is_prime[0] = is_prime[1] = false;

    //原理: 素数的倍数一定不是素数.
    //复杂度: O(nloglogn);
    //缺点: 重复筛, 比如6既是2的倍数又是3的倍数
    
    for(int i = 2; i <= n; i++)
    {
        if(is_prime[i])
        {
            prime[p++] = i;
            for(int j = 2 * i; j <= n; j += i)
            {
                is_prime[j] = false;
            }
        }
    }
    return p;
}
